import pygame
import random

LARGURA_JANELA = 400
ALTURA_JANELA = 200

class Jogo:
    def __init__(self):
        pygame.init()
        self.window = pygame.display.set_mode((LARGURA_JANELA, ALTURA_JANELA), vsync=True, flags=pygame.SCALED)
        pygame.display.set_caption('Jogo do Pedro')
        self.carrega_recursos()
        self.tela_atual = TelaInicial(self)

    def carrega_recursos(self):
        pygame.mixer.music.load('assets/snd/tgfcoder-FrozenJam-SeamlessLoop.ogg')
        pygame.mixer.music.play(-1)
        self.som_tiro = pygame.mixer.Sound('assets/snd/pew.wav')
        self.nave_img = pygame.transform.scale(pygame.image.load('assets/img/playerShip1_orange.png'), (50, 50))
        self.meteoro_img = pygame.transform.scale(pygame.image.load('assets/img/meteorBrown_med1.png'), (20, 20))
        self.fundo = pygame.image.load('assets/img/starfield.png')
        self.fonte = pygame.font.Font('assets/font/PressStart2P.ttf', 14)
        self.tiro_img = pygame.transform.scale(pygame.image.load('assets/img/laserRed16.png'), (10, 30))
        self.fundo = self.cria_fundo_com_estrelas()
        self.explosao_anim = []
        for i in range(9):
            img_path = f'assets/img/regularExplosion0{i}.png'
            img = pygame.image.load(img_path).convert()
            self.explosao_anim.append(img)
    
    def cria_fundo_com_estrelas(self):
        fundo = pygame.image.load('assets/img/starfield.png').convert()
        for _ in range(100):
            x = random.randint(0, LARGURA_JANELA)
            y = random.randint(0, ALTURA_JANELA)
            raio = random.randint(1, 3)
            pygame.draw.circle(fundo, (255, 255, 255), (x, y), raio)
        return fundo

    def muda_tela(self, tela):
        self.tela_atual = tela

    def run(self):
        while self.tela_atual.executa():
            pass
        pygame.quit()


class TelaBase:
    def __init__(self, jogo):
        self.jogo = jogo

    def executa(self):
        pass

    def desenha(self):
        pass

    def atualiza(self):
        pass


class TelaInicial(TelaBase):
    def executa(self):
        self.desenha()
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                return False
            if evento.type == pygame.KEYDOWN and evento.key == pygame.K_RETURN:
                self.jogo.muda_tela(TelaJogo(self.jogo))
        return True

    def desenha(self):
        self.jogo.window.fill((0, 0, 0))
        texto = self.jogo.fonte.render("Pressione ENTER para Iniciar", True, (255, 255, 255))
        pos_texto = texto.get_rect(center=(LARGURA_JANELA/2, ALTURA_JANELA/2))
        self.jogo.window.blit(texto, pos_texto.topleft)
        pygame.display.update()


class TelaGameOver(TelaBase):
    def executa(self):
        self.desenha()
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                return False
            if evento.type == pygame.KEYDOWN and evento.key == pygame.K_RETURN:
                self.jogo.muda_tela(TelaJogo(self.jogo))
        return True

    def desenha(self):
        self.jogo.window.fill((0, 0, 0))
        texto_1 = self.jogo.fonte.render("Game Over!", True, (255, 0, 0))
        texto_2 = self.jogo.fonte.render("ENTER para recome√ßar", True, (255, 0, 0))
        pos_texto1 = texto_1.get_rect(center=(LARGURA_JANELA/2, (ALTURA_JANELA/2) - 10))
        pos_texto2 = texto_2.get_rect(center=(LARGURA_JANELA/2, (ALTURA_JANELA/2) + 10))
        self.jogo.window.blit(texto_1, pos_texto1.topleft)
        self.jogo.window.blit(texto_2, pos_texto2.topleft)
        pygame.display.update()


class TelaJogo(TelaBase):
    def __init__(self, jogo):
        super().__init__(jogo)
        self.nave = Nave(jogo)
        self.meteoros = pygame.sprite.Group()
        self.coracoes = 3
        self.tiros = pygame.sprite.Group()
        self.explosoes = pygame.sprite.Group()
        for _ in range(10):
            meteoro = Meteoro(jogo)
            while pygame.sprite.collide_rect(self.nave, meteoro):
                meteoro = Meteoro(jogo)
            self.meteoros.add(meteoro)
        self.t0 = -1

    def executa(self):
        self.atualiza()
        self.desenha()
        colisoes = pygame.sprite.groupcollide(self.tiros, self.meteoros, True, True)
        for tiro, meteoros_atingidos in colisoes.items():
            for meteoro in meteoros_atingidos:
                explosao = Explosao(self.jogo, meteoro.rect.center)
                self.explosoes.add(explosao)
            meteoro = Meteoro(self.jogo)
            self.meteoros.add(meteoro)
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                return False
        if self.coracoes <= 0:
            self.jogo.muda_tela(TelaGameOver(self.jogo))
        return True

    def atualiza(self):
        dt = pygame.time.get_ticks() - self.t0 if self.t0 >= 0 else 0
        dt /= 1000 
        self.nave.atualiza()
        self.tiros.update(dt)
        self.explosoes.update()
        colisoes = pygame.sprite.spritecollide(self.nave, self.meteoros, True)
        if colisoes:
            self.coracoes -= 1

    def desenha(self):
        self.jogo.window.blit(self.jogo.fundo, (0, 0))
        self.meteoros.draw(self.jogo.window)
        self.nave.desenha()
        self.tiros.draw(self.jogo.window)
        self.explosoes.draw(self.jogo.window)
        coracoes_render = self.jogo.fonte.render(chr(9829) * self.coracoes, True, (255, 0, 0))
        self.jogo.window.blit(coracoes_render, (10, 20))
        t1 = pygame.time.get_ticks()
        fps = 0
        if self.t0 >= 0:
            t = t1 - self.t0
            fps = 1000 / t if t > 0 else 0
        self.t0 = t1
        texto_fps = self.jogo.fonte.render(f'FPS: {fps:.2f}', True, (255, 0, 0))
        self.jogo.window.blit(texto_fps, (250, 180))
        pygame.display.update()

class Tiro(pygame.sprite.Sprite):
    def __init__(self, jogo, x, y):
        super().__init__()
        self.image = jogo.tiro_img
        self.rect = self.image.get_rect(center=(x, y))
        self.vel = pygame.Vector2(0, -500)

    def update(self, dt):
        self.rect.y += self.vel.y * dt
        if self.rect.top < 0:
            self.kill()

class Explosao(pygame.sprite.Sprite):
    def __init__(self, jogo, pos):
        super().__init__()
        self.jogo = jogo
        self.frames = self.jogo.explosao_anim
        self.current_frame = 0
        self.image = self.frames[self.current_frame]
        self.rect = self.image.get_rect(center=pos)
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 50

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.current_frame += 1
            if self.current_frame == len(self.frames):
                self.kill()
            else:
                center = self.rect.center
                self.image = self.frames[self.current_frame]
                self.rect = self.image.get_rect(center=center)

class Nave(pygame.sprite.Sprite):
    def __init__(self, jogo):
        super().__init__()
        self.jogo = jogo
        self.image = self.jogo.nave_img
        self.rect = self.image.get_rect(center=(LARGURA_JANELA / 2, ALTURA_JANELA / 2))
        self.vel = pygame.Vector2(0, 0)

    def atualiza(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RIGHT]:
            self.vel.x = 400
        elif keys[pygame.K_LEFT]:
            self.vel.x = -400
        else:
            self.vel.x = 0

        if keys[pygame.K_UP]:
            self.vel.y = -300
        elif keys[pygame.K_DOWN]:
            self.vel.y = 300
        else:
            self.vel.y = 0

        if keys[pygame.K_SPACE]:
            self.jogo.som_tiro.play()
            tiro = Tiro(self.jogo, self.rect.centerx, self.rect.top)
            self.jogo.tela_atual.tiros.add(tiro)
        dt = pygame.time.get_ticks() - self.jogo.tela_atual.t0 if self.jogo.tela_atual.t0 >= 0 else 0
        dt /= 1000
        self.rect.x += self.vel.x * dt
        self.rect.y += self.vel.y * dt
        self.rect.x = max(0, min(self.rect.x, LARGURA_JANELA - self.rect.width))
        self.rect.y = max(0, min(self.rect.y, ALTURA_JANELA - self.rect.height))

    def desenha(self):
        self.jogo.window.blit(self.image, self.rect.topleft)


class Meteoro(pygame.sprite.Sprite):
    def __init__(self, jogo):
        super().__init__()
        self.image = jogo.meteoro_img
        self.rect = self.image.get_rect(topleft=(random.randint(0, LARGURA_JANELA - 20), random.randint(0, ALTURA_JANELA - 20)))


if __name__ == '__main__':
    jogo = Jogo()
    while jogo.tela_atual.executa():
        pass
    pygame.quit()