import pygame
import random


def posicao_segura(pos, nave_pos, min_dist=60):
    return abs(pos[0] - nave_pos[0]) > min_dist or abs(pos[1] - nave_pos[1]) > min_dist

def colide(pos1, size1, pos2, size2):
    rect1 = pygame.Rect(*pos1, *size1)
    rect2 = pygame.Rect(*pos2, *size2)
    return rect1.colliderect(rect2)


def inicializa():
    pygame.init()

    window = pygame.display.set_mode((400, 200), vsync=True, flags=pygame.SCALED)
    pygame.display.set_caption('Jogo do Pedro')

    pygame.mixer.music.load('assets/snd/tgfcoder-FrozenJam-SeamlessLoop.ogg')
    musica_fundo = pygame.mixer.music.play()
    som_tiro = pygame.mixer.Sound('assets/snd/pew.wav')


    estrelas = []
    for e in range(30):
        posicao_estrela = (random.randint(0, 320), random.randint(0, 240))
        tamanho_estrela = random.randint(2, 7)
        estrelas.append((posicao_estrela, tamanho_estrela))


    nave_img = pygame.image.load('assets/img/playerShip1_orange.png')
    nave = pygame.transform.scale(nave_img, (50, 50))

    meteoro_img = pygame.image.load('assets/img/meteorBrown_med1.png')
    meteoro = pygame.transform.scale(meteoro_img, (20, 20))
    meteoro_size = meteoro.get_size()


    nave_pos = [175, 75]
    
    meteoros = []
    while len(meteoros) < 10:
        posicao_meteoro = (random.randint(0, 380), random.randint(0, 180))
        if posicao_segura(posicao_meteoro, nave_pos) and not any(colide(posicao_meteoro, meteoro_size, m, meteoro_size) for m in meteoros):
            meteoros.append(posicao_meteoro)

    assets = {'nave': nave, 'fundo': pygame.image.load('assets/img/starfield.png'), 'estrelas': estrelas, 'meteoros': meteoros, 'meteoro_img': meteoro_img, 'fonte': pygame.font.Font('assets/font/PressStart2P.ttf', 14), 'coracoes': chr(9829) * 3, 'musica_fundo': musica_fundo, 'som_tiro': som_tiro}

    state = {'t0': -1, 'nave_pos': nave_pos, 'nave_vel': [0, 0], 'last_updated': 0}

    return window, assets, state


def atualiza_estado(state, assets):
    t = pygame.time.get_ticks()
    Δt = (t - state['last_updated']) / 1000
    state['last_updated'] = t

    window_height = 200
    window_width = 400

    state['nave_pos'][0] += state['nave_vel'][0] * Δt
    state['nave_pos'][1] += state['nave_vel'][1] * Δt 

    if state['nave_pos'][1] - 25 < 0 or state['nave_pos'][1] + 75 > window_height:
        state['nave_vel'][1] = 0
        state['nave_pos'][1] = max(min(state['nave_pos'][1], window_height - 75), 25)

    if state['nave_pos'][0] - 25 < 0 or state['nave_pos'][0] + 75 > window_width:
        state['nave_vel'][0] = 0
        state['nave_pos'][0] = max(min(state['nave_pos'][0], window_width - 75), 25)


    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            return False
        if evento.type == pygame.KEYDOWN:

            if evento.key == pygame.K_RIGHT:
                state['nave_vel'][0] = 400
            elif evento.key == pygame.K_LEFT:
                state['nave_vel'][0] = -400
            elif evento.key == pygame.K_UP:
                state['nave_vel'][1] = -300 
            elif evento.key == pygame.K_DOWN:
                state['nave_vel'][1] = 300 
            elif evento.key == pygame.K_SPACE:
                assets['som_tiro'].play()

        if evento.type == pygame.KEYUP:
            if evento.key in [pygame.K_RIGHT, pygame.K_LEFT]:
                state['nave_vel'][0] = 0
            if evento.key in [pygame.K_UP, pygame.K_DOWN]:
                state['nave_vel'][1] = 0

    nave_size = (50, 50)
    meteoro_size = (20, 20)

    for posicao in assets['meteoros']:
        if colide(state['nave_pos'], nave_size, posicao, meteoro_size):
            assets['coracoes'] = assets['coracoes'][:-1] 
            if len(assets['coracoes']) == 0: 
                print("Game Over!")
                return False
            assets['meteoros'].remove(posicao)
            break
    return True


def desenha(window, assets, state):
    window.blit(assets['fundo'], (0, 0))

    for posicao, tamanho in assets['estrelas']:
        pygame.draw.circle(window, (255, 255, 255), (posicao), tamanho)

    for posicao in assets['meteoros']:
        window.blit(assets['meteoro_img'], posicao)

    window.blit(assets['nave'], tuple(state['nave_pos']))

    fonte = assets['fonte'].render(assets['coracoes'], True, (255, 0, 0))
    window.blit(fonte, (10, 20))

    fps = 0
    t1 = pygame.time.get_ticks()
    if state['t0'] >= 0:
        t = t1 - state['t0']
        fps = 1000 / t
        print (fps)
    state['t0'] = t1

    texto_fps = assets['fonte'].render(f'FPS: {fps:.2f}', True, (255, 0, 0))
    window.blit(texto_fps, (250, 180))
    
    pygame.display.update()

def game_loop(window, assets, state):
    while atualiza_estado(state, assets):
        desenha(window, assets, state)

if __name__ == '__main__':
    window, assets, state = inicializa()
    game_loop(window, assets, state)