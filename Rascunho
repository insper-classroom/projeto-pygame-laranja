import pygame
import random
import math
import constants as c

def inicializa():
    pygame.init()
    window = pygame.display.set_mode((c.LARGURA, c.ALTURA), vsync=True, flags=pygame.SCALED)
    

    assets = {'valor': 1, 'rotação': 0 }
    assets['bruno'] = pygame.transform.scale(pygame.image.load('img/brunogrande.png'), (c.BRUNO_LARGURA, c.BRUNO_ALTURA))
    assets['agua'] = pygame.transform.scale(pygame.image.load('img/agua.png'), (c.AGUA_LARGURA, c.AGUA_ALTURA))
    assets['mangueira'] = pygame.transform.scale(pygame.image.load('img/mangueira.png'), (c.MANGUEIRA_LARGURA, c.MANGUEIRA_ALTURA))

    state = {}
    state['bruno_pos'] = [(c.LARGURA - c.BRUNO_LARGURA) / 2, (c.ALTURA - c.BRUNO_ALTURA) / 2]
    state['mangueira_posicao'] = [(c.LARGURA - c.MANGUEIRA_LARGURA) / 2, (c.ALTURA - c.MANGUEIRA_ALTURA) / 2]
    state['agua'] = []
    state['espirra_agua'] = False
    state['agua_atual'] = 100  
    state['agua_max'] = 100    

    return window, assets, state

def atualiza_estado(window, assets, state):

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return False
        
        
        if event.type == pygame.MOUSEBUTTONDOWN:
            state['espirra_agua'] = True
        elif event.type == pygame.MOUSEBUTTONUP:
            state['espirra_agua'] = False
        else:
            if event.type == pygame.MOUSEBUTTONDOWN:
                assets['valor'] == 15

  
    mouse_x, mouse_y = pygame.mouse.get_pos()
    centro_x, centro_y = (state['bruno_pos'][0] + c.BRUNO_LARGURA / 2, 
                          state['bruno_pos'][1] + c.BRUNO_ALTURA / 2)
    rel_x, rel_y = mouse_x - centro_x, mouse_y - centro_y
    angulo = (180 / math.pi) * -math.atan2(rel_y, rel_x)
    assets['rotação'] = angulo

    state['mangueira_posicao'][0] = centro_x + c.DISTANCIA_CENTRO_MANGUEIRA * math.cos(math.radians(-angulo)) - c.MANGUEIRA_LARGURA/2
    state['mangueira_posicao'][1] = centro_y + c.DISTANCIA_CENTRO_MANGUEIRA * math.sin(math.radians(-angulo)) - c.MANGUEIRA_ALTURA/2

    if state.get('espirra_agua') and state['agua_atual'] > 0:
        mouse_pos = pygame.mouse.get_pos()

        mangueira_ponta = (
            state['mangueira_posicao'][0] + c.MANGUEIRA_LARGURA / 2,
            state['mangueira_posicao'][1] + c.MANGUEIRA_ALTURA / 2
        )

        diff_x = mouse_pos[0] - mangueira_ponta[0]
        diff_y = mouse_pos[1] - mangueira_ponta[1]
        angulo = -math.degrees(math.atan2(diff_y, diff_x))

        assets['rotação'] = angulo
        
        state['agua'].append({
            'posicao': list(mangueira_ponta),
            'angulo': angulo
        })

        state['agua_atual'] -= c.AGUA_CONSUMO

    if not state.get('espirra_agua') and state['agua_atual'] < state['agua_max']:
        state['agua_atual'] += 0.5
        if state['agua_atual'] > state['agua_max']:
            state['agua_atual'] = state['agua_max']


    for part in state['agua']:
        part['posicao'][0] += c.AGUA_VEL * math.cos(math.radians(-part['angulo']))
        part['posicao'][1] += c.AGUA_VEL * math.sin(math.radians(-part['angulo']))


    return True

def desenha(window, assets, state):
    window.fill((0, 0, 0))

    for part in state['agua']:
        window.blit(assets['agua'], part['posicao'])

    posicao_barra_agua = ((c.LARGURA - c.BARRA_AGUA_LARGURA) / 2, c.ALTURA - c.BARRA_AGUA_ALTURA - 3)
    agua_atual = state['agua_atual'] / state['agua_max']
    pygame.draw.rect(window, c.CINZA, (posicao_barra_agua[0], posicao_barra_agua[1], c.BARRA_AGUA_LARGURA, c.BARRA_AGUA_ALTURA))
    pygame.draw.rect(window, c.AZUL, (posicao_barra_agua[0], posicao_barra_agua[1], c.BARRA_AGUA_LARGURA * agua_atual, c.BARRA_AGUA_ALTURA))
    
    pygame.display.update()
    
    return window

def game_loop(window, assets, state):
    while atualiza_estado(window, assets, state):
        desenha(window, assets, state)

if __name__ == '__main__':
    w, a, s = inicializa()
    game_loop(w, a, s)

